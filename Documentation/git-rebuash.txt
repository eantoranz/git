git-rebuash(1)
=============

NAME
----
git-rebuash - Squash/Rebase in a single shot


SYNOPSIS
--------
[verse]
'git rebuash' [-m <msg>] [ -u <upstream> ]
'git rebuash' --continue
'git rebuash' --abort

DESCRIPTION
-----------
Rebuash allows us to do squash/rebase without having to resort
to use rebase.

Consider the case where we have feature branches with merges in history:

Rx: revisions in main branch
Fx: Revisions in feature branch
Mx: Merge revisions (some of them with conflicts)

------------
	R1---R2---R3---R4---R5---R6---R7
	 \         \              \
	  F1---F2---M1---F3---F4---M2---F5
------------

If on M1 there were conflicts, it's more than likely that if we tried to
cherry-pick R1..F2 on top of R7, we will have to deal with a conflict. But that
conflict has already been taken care of on M1. So, in order to leverage that
work that has already been done, instead of looking back, we look forward.

First, we create a (temporary) merge commit of both branches (M3)

------------
	R1---R2---R3---R4---R5---R6---R7---M3
	 \         \              \       /
	  F1---F2---M1---F3---F4---M2---F5
------------

At this point, all differences between M3 and R7 are the changes related to the
feature branch, so we can run git reset --soft from M3 to R7 to put all those
differeces in index, and then we create single revision that is both
squashed/rebased for our feature branch.

git rebuash will take care of all the details, even figuring out
what the upstream branch is if it is not provided.

git checkout feature1
git rebuash -u upstream-branch -m "Feature 1 in a single revision"


OPTIONS
-------

-m <msg>::
	Set the commit message to be used for the merge commit

-u <upstream>::
	Set the upstream branch. If it is not provided, the upstream branch
	from the currently checked out branch will be used.

--abort::
	Abort the current rebuash process and go back
	to the original state before starting rebuash

--continue::
	If rebuash stopped (due to a conflict of an empty commit message),
	allow the process to go on after solving the current issue that made it
	stop.

